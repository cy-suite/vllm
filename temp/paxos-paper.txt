Here is a paper:\n\nIntroduction\n\nThe Paxos algorithm for implementing a fault-tolerant distributed system\nhas been regarded as difficult to understand, perhaps because the original\npresentation was Greek to many readers [5]. In fact, it is among the simplest and most obvious of distributed algorithms. At its heart is a consensus\nalgorithm—the “synod” algorithm of [5]. The next section shows that this\nconsensus algorithm follows almost unavoidably from the properties we want\nit to satisfy. The last section explains the complete Paxos algorithm, which\nis obtained by the straightforward application of consensus to the state machine approach for building a distributed system—an approach that should\nbe well-known, since it is the subject of what is probably the most often-cited\narticle on the theory of distributed systems [4].\n\nThe Consensus Algorithm\n\n2.1\n\nThe Problem\n\nAssume a collection of processes that can propose values. A consensus algorithm ensures that a single one among the proposed values is chosen. If\nno value is proposed, then no value should be chosen. If a value has been\nchosen, then processes should be able to learn the chosen value. The safety\nrequirements for consensus are:\n• Only a value that has been proposed may be chosen,\n• Only a single value is chosen, and\n• A process never learns that a value has been chosen unless it actually\nhas been.\nWe won’t try to specify precise liveness requirements. However, the goal is\nto ensure that some proposed value is eventually chosen and, if a value has\nbeen chosen, then a process can eventually learn the value.\nWe let the three roles in the consensus algorithm be performed by three\nclasses of agents: proposers, acceptors, and learners. In an implementation,\na single process may act as more than one agent, but the mapping from\nagents to processes does not concern us here.\nAssume that agents can communicate with one another by sending messages. We use the customary asynchronous, non-Byzantine model, in which:\n• Agents operate at arbitrary speed, may fail by stopping, and may\nrestart. Since all agents may fail after a value is chosen and then\nrestart, a solution is impossible unless some information can be remembered by an agent that has failed and restarted.\n• Messages can take arbitrarily long to be delivered, can be duplicated,\nand can be lost, but they are not corrupted.\n\n2.2\n\nChoosing a Value\n\nThe easiest way to choose a value is to have a single acceptor agent. A proposer sends a proposal to the acceptor, who chooses the first proposed value\nthat it receives. Although simple, this solution is unsatisfactory because the\nfailure of the acceptor makes any further progress impossible.\nSo, let’s try another way of choosing a value. Instead of a single acceptor,\nlet’s use multiple acceptor agents. A proposer sends a proposed value to a\nset of acceptors. An acceptor may accept the proposed value. The value is\nchosen when a large enough set of acceptors have accepted it. How large is\nlarge enough? To ensure that only a single value is chosen, we can let a large\nenough set consist of any majority of the agents. Because any two majorities\nhave at least one acceptor in common, this works if an acceptor can accept\nat most one value. (There is an obvious generalization of a majority that\nhas been observed in numerous papers, apparently starting with [3].)\nIn the absence of failure or message loss, we want a value to be chosen\neven if only one value is proposed by a single proposer. This suggests the\nrequirement:\nP1. An acceptor must accept the first proposal that it receives.\nBut this requirement raises a problem. Several values could be proposed by\ndifferent proposers at about the same time, leading to a situation in which\nevery acceptor has accepted a value, but no single value is accepted by a\nmajority of them. Even with just two proposed values, if each is accepted by\nabout half the acceptors, failure of a single acceptor could make it impossible\nto learn which of the values was chosen.\nP1 and the requirement that a value is chosen only when it is accepted\nby a majority of acceptors imply that an acceptor must be allowed to accept\nmore than one proposal. We keep track of the different proposals that an\nacceptor may accept by assigning a (natural) number to each proposal, so a\nproposal consists of a proposal number and a value. To prevent confusion,\nwe require that different proposals have different numbers. How this is\nachieved depends on the implementation, so for now we just assume it. A\nvalue is chosen when a single proposal with that value has been accepted by\na majority of the acceptors. In that case, we say that the proposal (as well\nas its value) has been chosen.\nWe can allow multiple proposals to be chosen, but we must guarantee\nthat all chosen proposals have the same value. By induction on the proposal\nnumber, it suffices to guarantee:\nP2. If a proposal with value v is chosen, then every higher-numbered proposal that is chosen has value v .\nSince numbers are totally ordered, condition P2 guarantees the crucial safety\nproperty that only a single value is chosen.\nTo be chosen, a proposal must be accepted by at least one acceptor. So,\nwe can satisfy P2 by satisfying:\nP2a . If a proposal with value v is chosen, then every higher-numbered proposal accepted by any acceptor has value v .\nWe still maintain P1 to ensure that some proposal is chosen. Because communication is asynchronous, a proposal could be chosen with some particular acceptor c never having received any proposal. Suppose a new proposer\n“wakes up” and issues a higher-numbered proposal with a different value.\nP1 requires c to accept this proposal, violating P2a . Maintaining both P1\nand P2a requires strengthening P2a to:\nP2b . If a proposal with value v is chosen, then every higher-numbered proposal issued by any proposer has value v .\nSince a proposal must be issued by a proposer before it can be accepted by\nan acceptor, P2b implies P2a , which in turn implies P 2.\nTo discover how to satisfy P2b , let’s consider how we would prove that\nit holds. We would assume that some proposal with number m and value\nv is chosen and show that any proposal issued with number n > m also\nhas value v . We would make the proof easier by using induction on n,\nso we can prove that proposal number n has value v under the additional\nassumption that every proposal issued with a number in m . . (n − 1) has\nvalue v , where i . . j denotes the set of numbers from i through j . For the\nproposal numbered m to be chosen, there must be some set C consisting of a\nmajority of acceptors such that every acceptor in C accepted it. Combining\nthis with the induction assumption, the hypothesis that m is chosen implies:\nEvery acceptor in C has accepted a proposal with number in\nm . . (n − 1), and every proposal with number in m . . (n − 1)\naccepted by any acceptor has value v .\nSince any set S consisting of a majority of acceptors contains at least one\nmember of C , we can conclude that a proposal numbered n has value v by\nensuring that the following invariant is maintained:\nP2c . For any v and n, if a proposal with value v and number n is issued,\nthen there is a set S consisting of a majority of acceptors such that\neither (a) no acceptor in S has accepted any proposal numbered less\nthan n, or (b) v is the value of the highest-numbered proposal among\nall proposals numbered less than n accepted by the acceptors in S .\nWe can therefore satisfy P2b by maintaining the invariance of P2c .\nTo maintain the invariance of P2c , a proposer that wants to issue a proposal numbered n must learn the highest-numbered proposal with number\nless than n, if any, that has been or will be accepted by each acceptor in\nsome majority of acceptors. Learning about proposals already accepted is\neasy enough; predicting future acceptances is hard. Instead of trying to predict the future, the proposer controls it by extracting a promise that there\nwon’t be any such acceptances. In other words, the proposer requests that\nthe acceptors not accept any more proposals numbered less than n. This\nleads to the following algorithm for issuing proposals.\n1. A proposer chooses a new proposal number n and sends a request to\neach member of some set of acceptors, asking it to respond with:\n(a) A promise never again to accept a proposal numbered less than\nn, and\n(b) The proposal with the highest number less than n that it has\naccepted, if any.\nI will call such a request a prepare request with number n.\n2. If the proposer receives the requested responses from a majority of\nthe acceptors, then it can issue a proposal with number n and value\nv , where v is the value of the highest-numbered proposal among the\nresponses, or is any value selected by the proposer if the responders\nreported no proposals.\n\nA proposer issues a proposal by sending, to some set of acceptors, a request\nthat the proposal be accepted. (This need not be the same set of acceptors\nthat responded to the initial requests.) Let’s call this an accept request.\nThis describes a proposer’s algorithm. What about an acceptor? It can\nreceive two kinds of requests from proposers: prepare requests and accept\nrequests. An acceptor can ignore any request without compromising safety.\nSo, we need to say only when it is allowed to respond to a request. It can\nalways respond to a prepare request. It can respond to an accept request,\naccepting the proposal, iff it has not promised not to. In other words:\nP1a . An acceptor can accept a proposal numbered n iff it has not responded\nto a prepare request having a number greater than n.\nObserve that P1a subsumes P1.\nWe now have a complete algorithm for choosing a value that satisfies the\nrequired safety properties—assuming unique proposal numbers. The final\nalgorithm is obtained by making one small optimization.\nSuppose an acceptor receives a prepare request numbered n, but it has\nalready responded to a prepare request numbered greater than n, thereby\npromising not to accept any new proposal numbered n. There is then no\nreason for the acceptor to respond to the new prepare request, since it will\nnot accept the proposal numbered n that the proposer wants to issue. So\nwe have the acceptor ignore such a prepare request. We also have it ignore\na prepare request for a proposal it has already accepted.\nWith this optimization, an acceptor needs to remember only the highest numbered proposal that it has ever accepted and the number of the highest numbered prepare request to which it has responded. Because P2c must\nbe kept invariant regardless of failures, an acceptor must remember this\ninformation even if it fails and then restarts. Note that the proposer can\nalways abandon a proposal and forget all about it—as long as it never tries\nto issue another proposal with the same number.\nPutting the actions of the proposer and acceptor together, we see that\nthe algorithm operates in the following two phases.\nPhase 1. (a) A proposer selects a proposal number n and sends a prepare\nrequest with number n to a majority of acceptors.\n(b) If an acceptor receives a prepare request with number n greater\nthan that of any prepare request to which it has already responded,\nthen it responds to the request with a promise not to accept any more\nproposals numbered less than n and with the highest-numbered proposal (if any) that it has accepted.\n\nPhase 2. (a) If the proposer receives a response to its prepare requests\n(numbered n) from a majority of acceptors, then it sends an accept\nrequest to each of those acceptors for a proposal numbered n with a\nvalue v , where v is the value of the highest-numbered proposal among\nthe responses, or is any value if the responses reported no proposals.\n(b) If an acceptor receives an accept request for a proposal numbered\nn, it accepts the proposal unless it has already responded to a prepare\nrequest having a number greater than n.\nA proposer can make multiple proposals, so long as it follows the algorithm\nfor each one. It can abandon a proposal in the middle of the protocol at any\ntime. (Correctness is maintained, even though requests and/or responses\nfor the proposal may arrive at their destinations long after the proposal\nwas abandoned.) It is probably a good idea to abandon a proposal if some\nproposer has begun trying to issue a higher-numbered one. Therefore, if an\nacceptor ignores a prepare or accept request because it has already received\na prepare request with a higher number, then it should probably inform\nthe proposer, who should then abandon its proposal. This is a performance\noptimization that does not affect correctness.\n\n2.3\n\nLearning a Chosen Value\n\nTo learn that a value has been chosen, a learner must find out that a proposal has been accepted by a majority of acceptors. The obvious algorithm\nis to have each acceptor, whenever it accepts a proposal, respond to all\nlearners, sending them the proposal. This allows learners to find out about\na chosen value as soon as possible, but it requires each acceptor to respond\nto each learner—a number of responses equal to the product of the number\nof acceptors and the number of learners.\nThe assumption of non-Byzantine failures makes it easy for one learner\nto find out from another learner that a value has been accepted. We can\nhave the acceptors respond with their acceptances to a distinguished learner,\nwhich in turn informs the other learners when a value has been chosen. This\napproach requires an extra round for all the learners to discover the chosen\nvalue. It is also less reliable, since the distinguished learner could fail. But\nit requires a number of responses equal only to the sum of the number of\nacceptors and the number of learners.\nMore generally, the acceptors could respond with their acceptances to\nsome set of distinguished learners, each of which can then inform all the\nlearners when a value has been chosen. Using a larger set of distinguished\nlearners provides greater reliability at the cost of greater communication\ncomplexity.\nBecause of message loss, a value could be chosen with no learner ever\nfinding out. The learner could ask the acceptors what proposals they have\naccepted, but failure of an acceptor could make it impossible to know whether\nor not a majority had accepted a particular proposal. In that case, learners\nwill find out what value is chosen only when a new proposal is chosen. If\na learner needs to know whether a value has been chosen, it can have a\nproposer issue a proposal, using the algorithm described above.\n\n2.4\n\nProgress\n\nIt’s easy to construct a scenario in which two proposers each keep issuing\na sequence of proposals with increasing numbers, none of which are ever\nchosen. Proposer p completes phase 1 for a proposal number n 1 . Another\nproposer q then completes phase 1 for a proposal number n 2 > n 1 . Proposer\np’s phase 2 accept requests for a proposal numbered n 1 are ignored because\nthe acceptors have all promised not to accept any new proposal numbered\nless than n 2 . So, proposer p then begins and completes phase 1 for a new\nproposal number n 3 > n 2 , causing the second phase 2 accept requests of\nproposer q to be ignored. And so on.\nTo guarantee progress, a distinguished proposer must be selected as the\nonly one to try issuing proposals. If the distinguished proposer can communicate successfully with a majority of acceptors, and if it uses a proposal\nwith number greater than any already used, then it will succeed in issuing a\nproposal that is accepted. By abandoning a proposal and trying again if it\nlearns about some request with a higher proposal number, the distinguished\nproposer will eventually choose a high enough proposal number.\nIf enough of the system (proposer, acceptors, and communication network) is working properly, liveness can therefore be achieved by electing a\nsingle distinguished proposer. The famous result of Fischer, Lynch, and Patterson [1] implies that a reliable algorithm for electing a proposer must use\neither randomness or real time—for example, by using timeouts. However,\nsafety is ensured regardless of the success or failure of the election.\n\n2.5\n\nThe Implementation\n\nThe Paxos algorithm [5] assumes a network of processes. In its consensus\nalgorithm, each process plays the role of proposer, acceptor, and learner.\nThe algorithm chooses a leader, which plays the roles of the distinguished\nproposer and the distinguished learner. The Paxos consensus algorithm is precisely the one described above, where requests and responses are sent as ordinary messages. (Response messages are tagged with the corresponding proposal number to prevent confusion.) Stable storage, preserved during failures, is used to maintain the information that the acceptor must remember. An acceptor records its intended response in stable storage before actually sending the response.\nAll that remains is to describe the mechanism for guaranteeing that no two proposals are ever issued with the same number. Different proposers choose their numbers from disjoint sets of numbers, so two different proposers never issue a proposal with the same number. Each proposer remembers (in stable storage) the highest-numbered proposal it has tried to issue,\nand begins phase 1 with a higher proposal number than any it has already\nused.\n\nCan you give a detailed summary of this paper for me?